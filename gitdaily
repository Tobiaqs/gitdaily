ARGS=" $@ "

# http://misc.flogisoft.com/bash/tip_colors_and_formatting
# Foregrounds
DEFAULT_FOREGROUND="\e[39m"
ALPHA_COLOR="\e[34m"
META_COLOR="\e[90m"
PAPER_COLOR="\e[37m"
BASIC_COLOR="\e[36m"
FOLDER_COLOR="${ALPHA_COLOR}"
LOCAL_FOLDER_COLOR="\e[33m"
HEADING_COLOR=""
SUBHEADING_COLOR="\e[96m"
# Formats
UNDERLINE_ON="\e[4m"
UNDERLINE_OFF="\e[24m"
BOLD_ON="\e[1m"
BOLD_OFF="\e[21m"

GITDAILY="${BOLD_ON}GitDaily${BOLD_OFF}"
VERSION="0.3.0"

PAPERLINE="────────────────────────────────"

function openPaper {	
	echo -e "${META_COLOR}┌${PAPERLINE}┐"
	writePaper "           ${ALPHA_COLOR}${GITDAILY}${META_COLOR}            │"
	writePaper
}

function writePaper {
	if [[ "${1}" == "" ]]; then
		echo -e "${META_COLOR}├${PAPERLINE}┤"
	else
		echo -e "${META_COLOR}│ ${1}"
	fi
}

function closePaper {
	writePaper "${PAPER_COLOR}$(date)${META_COLOR}  │"
	echo -e "${META_COLOR}└${PAPERLINE}┘${DEFAULT_FOREGROUND}"
}

if [[ "$ARGS" == *" -v "* || "$ARGS" == *" --version "* ]]; then
	openPaper
	writePaper "${PAPER_COLOR}$GITDAILY version $VERSION"
	writePaper "${PAPER_COLOR}Build with ☮ & ${BOLD_ON}♥${BOLD_OFF}"
	writePaper
	closePaper
	exit 0
elif [[ "$ARGS" == *" -h "* || "$ARGS" == *" --help "* ]]; then
	echo -e "$GITDAILY will look for a configuration file in ~/.config/gitdaily_paths."
	echo "See the readme for more information on the format of this file."
	echo
	echo "Usage options:"
	echo "	-h, --help	Show help message"
	echo "	-v, --version	Display version"
	echo "	-a, --all	View status for all repositories, even clean ones"
	echo "	-c, --compact	Compact view"
	echo "	-l, --local	Run locally, view status of current directory"
	echo "	-s, --subdir	Run locally, view status of subdirectories"
	echo
	exit 0
else
	openPaper
fi

if [[ "$ARGS" == *" -s "* || "$ARGS" == *" --subdir "* ]]; then
	INPUT="`pwd`/*"
elif [[ "$ARGS" == *" -l "* || "$ARGS" == *" --local "* ]]; then
	INPUT="`pwd`"
else
	if [[ -d "$HOME/.config" && -f "$HOME/.config/gitdaily_paths" ]]; then
		INPUT="`cat $HOME/.config/gitdaily_paths`"
	else
		writePaper "Configuration file not found at"
		writePaper "${PAPER_COLOR}~/.config/gitdaily_paths"
		writePaper "Checking local subdirectories"
		writePaper
		INPUT="`pwd` /*"
	fi
fi

function iteration {
	if [[ -d "$dir" && -d "$dir/.git" ]]; then
		GIT_STATUS=`git -C "$dir" status`
		local BASENAME="$HEADING_COLOR$BOLD_ON$UNDERLINE_ON$(basename "$dir")$BOLD_OFF$UNDERLINE_OFF"
		if [[ "$GIT_STATUS" != *"clean"* ]]; then
			if [[ "$ARGS" != *" -c "* || "$ARGS" == *" --compact "* ]]; then
				writePaper "${BASENAME}"
				GIT_STATUS_FILTERED=`echo "$GIT_STATUS" | grep "^	\|^Untracked files:\|^Changes not staged for commit:$\|^Changes to be committed:$"`

				while read -r line; do
					if [[ `echo "$line" | grep "^Untracked files:\|^Changes not staged for commit:$\|^Changes to be committed:$"` != "" ]]; then
						writePaper "$SUBHEADING_COLOR$line"
					else
						writePaper "$BASIC_COLOR    $line"
					fi
				done <<< "${GIT_STATUS_FILTERED}"
				writePaper 
			else
				writePaper "${BASENAME}${SUBHEADING_COLOR} is not clean."
				writePaper
			fi
		elif [[ "$ARGS" == *" -a "* || "$ARGS" == *" --all "* ]]; then
			writePaper "${BASENAME}${SUBHEADING_COLOR} is clean."
			writePaper
		fi
	fi	
}

while read -r line; do
	if [[ "$line" == *"/*"* ]]; then
		line=`eval echo "${line%/*}"`
		HEADING_COLOR="${FOLDER_COLOR}"
		if [ -d "$line" ]; then
			for dir in $line/*; do
				iteration
			done
		else
			writePaper "$dir (from config) does not exist!"
		fi
	else
		dir=`eval echo "$line"`
		HEADING_COLOR="${LOCAL_FOLDER_COLOR}"
		if [ -d "$dir" ]; then
			iteration
		else
			writePaper "$dir (from config) does not exist!"
		fi
	fi
done <<< "$INPUT"

closePaper
