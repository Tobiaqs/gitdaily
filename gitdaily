# http://misc.flogisoft.com/bash/tip_colors_and_formatting
# Foregrounds
DEFAULT_FOREGROUND="\e[39m"
ALPHA_COLOR="\e[94m"
META_COLOR="\e[90m"
PAPER_COLOR="\e[37m"
CLEAN_COLOR="\e[92m"
REPO_STATUS_COLOR="\e[96m"
REPO_INFO_COLOR="\e[36m"
# Formats
UNDERLINE_ON="\e[4m"
BOLD_ON="\e[1m"
STYLE_OFF="\e[0m"

GITDAILY="${BOLD_ON}GitDaily${STYLE_OFF}"
VERSION="0.3.1"
BUZZWORD="clean"

REPO_COUNT=0
BUZZ_COUNT=0
PAPERLINE="────────────────────────────────"

function openPaper {	
	echo -e "${META_COLOR}┌${PAPERLINE}┐"
	writePaper "           ${ALPHA_COLOR}${GITDAILY}${META_COLOR}            │"
	writePaper
}

function writePaper {
	if [[ "${1}" == "" ]]; then
		echo -e "${META_COLOR}├${PAPERLINE}┤"
	else
		echo -e "${META_COLOR}│ ${1}"
	fi
}

function closePaper {
	if [ "$COMPACT" = true ]; then
		writePaper
	fi
	if [ -n "$MESSAGE" ]; then
		while IFS= read -r line; do
			writePaper "${ALPHA_COLOR}${line}"
		done <<< "${MESSAGE}"
		writePaper
	fi
	writePaper "${PAPER_COLOR}# ${BUZZ_COUNT}/${REPO_COUNT} ${BUZZWORD}		$(date +%T)${META_COLOR} │"
	echo -e "${META_COLOR}└${PAPERLINE}┘${DEFAULT_FOREGROUND}"
}

# Arguments
ALL=false
COMPACT=false
FROM_CONFIG=true
MESSAGE=""

# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
	-h|--help)
	echo -e "$GITDAILY will look for a configuration file in ~/.config/gitdaily_paths."
	echo "See the readme for more information on the format of this file."
	echo
	echo "Usage options:"
	echo "	-h, --help	Show help message"
	echo "	-v, --version	Display version"
	echo "	-a, --all	View status for all repositories, even ${BUZZWORD} ones"
	echo "	-c, --compact	Compact view"
	echo "	-l, --local	Run locally, view status of current directory"
	echo "	-s, --subdir	Run locally, view status of subdirectories"
	echo
	exit 0
	;;
	-v|--version)
	openPaper
	writePaper "${PAPER_COLOR}$GITDAILY version $VERSION"
	writePaper "${PAPER_COLOR}Build with ☮ & ${BOLD_ON}♥${STYLE_OFF}"
	echo -e "${META_COLOR}└${PAPERLINE}┘${DEFAULT_FOREGROUND}"
	exit 0
	;;
	-a|--all)
	ALL=true
	;;
	-c|--compact)
	COMPACT=true
	;;
	-l|--local)
	INPUT="`pwd`"
	FROM_CONFIG=false
	;;
	-s|--subdir)
	INPUT="`pwd`/*"
	FROM_CONFIG=false
	;;
	*)
	MESSAGE="$key"
	;;
esac
shift
done

openPaper

if [ "$FROM_CONFIG" = true ]; then
	if [[ -d "$HOME/.config" && -f "$HOME/.config/gitdaily_paths" ]]; then
		INPUT="`cat $HOME/.config/gitdaily_paths`"
	else
		writePaper "Configuration file not found at"
		writePaper "${PAPER_COLOR}~/.config/gitdaily_paths"
		writePaper "Checking local subdirectories"
		writePaper
		INPUT="`pwd` /*"
	fi
fi

function iteration {
	if [[ -d "$dir" && -d "$dir/.git" ]]; then
		((REPO_COUNT++))
		local GIT_STATUS=`git -C "$dir" status`
		local BASENAME="${BOLD_ON}${UNDERLINE_ON}$(basename "$dir")${STYLE_OFF}"
		if [[ "$GIT_STATUS" != *"clean"* ]]; then
			writePaper "${ALPHA_COLOR}${BASENAME} is not ${BUZZWORD}."
			if [ "$COMPACT" = false ]; then
				GIT_STATUS_FILTERED=`echo "$GIT_STATUS" | grep "^	\|^Untracked files:\|^Changes not staged for commit:$\|^Changes to be committed:$"`

				while read -r line; do
					if [[ `echo "$line" | grep "^Untracked files:\|^Changes not staged for commit:$\|^Changes to be committed:$"` != "" ]]; then
						writePaper "${REPO_STATUS_COLOR}${line}"
					else
						writePaper "${REPO_INFO_COLOR}    ${line}"
					fi
				done <<< "${GIT_STATUS_FILTERED}"
				writePaper
			fi
		else
			((BUZZ_COUNT++))
			if [ "$ALL" = true ]; then
				writePaper "${CLEAN_COLOR}${BASENAME} is ${BUZZWORD}."
				if [ "$COMPACT" = false ]; then
					writePaper
				fi
			fi
		fi
	fi	
}

while read -r line; do
	if [ "$COMPACT" = false ]; then
		writePaper "${PAPER_COLOR}From ${line}"
		writePaper
	fi
	if [[ "$line" == *"/*"* ]]; then
		line=`eval echo "${line%/*}"`
		if [ -d "$line" ]; then
			for dir in $line/*; do
				iteration
			done
		else
			writePaper "$dir (from config) does not exist!"
		fi
	else
		dir=`eval echo "$line"`
		if [ -d "$dir" ]; then
			iteration
		else
			writePaper "$dir (from config) does not exist!"
		fi
	fi
done <<< "$INPUT"

closePaper
