ARGS=" $@ "

# http://misc.flogisoft.com/bash/tip_colors_and_formatting
META_COLOR="\e[92m"
BASIC_COLOR="\e[36m"
SUBHEADING_COLOR="\e[96m"
UNDERLINE_ON="\e[4m"
UNDERLINE_OFF="\e[24m"
GRAY_BG_ON="\e[100m"
GRAY_BG_OFF="\e[49m"
BOLD_ON="\e[1m"
BOLD_OFF="\e[21m"

GITDAILY="${BOLD_ON}GitDaily${BOLD_OFF}"
VERSION="0.2.2"

function writePaper {
	echo -e "$META_COLOR│ $1"
}

function closePaper {
	echo -e "${META_COLOR}└──────────────────────────\e[39m"
	exit 0
}

if [[ "$ARGS" == *" -v "* || "$ARGS" == *" --version "* ]]; then
	echo -e "$GITDAILY $VERSION"
	exit 0
elif [[ "$ARGS" == *" -h "* || "$ARGS" == *" --help "* ]]; then
	echo -e "$GITDAILY will look for a configuration file in ~/.config/gitdaily_paths."
	echo "See the readme for more information on the format of this file."
	echo
	echo "Usage:"
	echo
	echo "  -h/--help	Show help message"
	echo "  -v/--version	Display version"
	echo "  -a		View status for all repositories, even clean ones"
	echo "  -c		Compact view"
	echo "  -l		Run locally, view status of current directory"
	echo "  -ls		Run locally, view status of subdirectories"
	echo
	exit 0
else
	echo -e "┌──────── $GITDAILY ────────"
fi

if [[ "$ARGS" == *" -ls "* ]]; then
	INPUT="`pwd`/*"
elif [[ "$ARGS" == *" -l "* ]]; then
	INPUT="`pwd`"
else
	if [[ -d "$HOME/.config" && -f "$HOME/.config/gitdaily_paths" ]]; then
		INPUT="`cat $HOME/.config/gitdaily_paths`"
	else
		writePaper "Configuration file doesn't exist at ~/.config/gitdaily_paths"
		closePaper
	fi
fi

function iteration {
	if [[ -d "$dir" && -d "$dir/.git" ]]; then
		GIT_STATUS=`git -C "$dir" status`
		if [[ "$GIT_STATUS" != *"clean"* ]]; then
			if [[ "$ARGS" != *" -c "* ]]; then
				writePaper "$HEADING_COLOR$UNDERLINE_ON$(basename "$dir")$UNDERLINE_OFF"
				GIT_STATUS_FILTERED=`echo "$GIT_STATUS" | grep "^	\|^Untracked files:\|^Changes not staged for commit:$\|^Changes to be committed:$"`

				while read -r line; do
					if [[ `echo "$line" | grep "^Untracked files:\|^Changes not staged for commit:$\|^Changes to be committed:$"` != "" ]]; then
						writePaper "$SUBHEADING_COLOR	$line"
					else
						writePaper "$BASIC_COLOR		$line"
					fi
				done <<< "$GIT_STATUS_FILTERED"
				writePaper 
			else
				writePaper "$HEADING_COLOR$UNDERLINE_ON$(basename "$dir")$UNDERLINE_OFF$SUBHEADING_COLOR is not clean."
			fi
		elif [[ "$ARGS" == *" -a "* ]]; then
			writePaper "$HEADING_COLOR$UNDERLINE_ON$(basename "$dir")$UNDERLINE_OFF$SUBHEADING_COLOR is clean."
		fi
	fi	
}

while read -r line; do
	if [[ "$line" == *"/*"* ]]; then
		HEADING_COLOR="\e[92m"
		line=`eval echo "${line%/*}"`
		if [ -d "$line" ]; then
			for dir in $line/*; do
				iteration
			done
		else
			writePaper "$dir (from config) does not exist!"
		fi
	else
		dir=`eval echo "$line"`
		HEADING_COLOR="\e[33m"
		if [ -d "$dir" ]; then
			iteration
		else
			writePaper "$dir (from config) does not exist!"
		fi
	fi
done <<< "$INPUT"

closePaper
